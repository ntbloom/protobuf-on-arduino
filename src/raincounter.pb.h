// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raincounter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raincounter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raincounter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raincounter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raincounter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raincounter_2eproto;
class DataPacket;
struct DataPacketDefaultTypeInternal;
extern DataPacketDefaultTypeInternal _DataPacket_default_instance_;
class EventPacket;
struct EventPacketDefaultTypeInternal;
extern EventPacketDefaultTypeInternal _EventPacket_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DataPacket* Arena::CreateMaybeMessage<::DataPacket>(Arena*);
template<> ::EventPacket* Arena::CreateMaybeMessage<::EventPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum DataPacket_PacketType : int {
  DataPacket_PacketType_TEMPERATURE = 0,
  DataPacket_PacketType_DataPacket_PacketType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DataPacket_PacketType_DataPacket_PacketType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DataPacket_PacketType_IsValid(int value);
constexpr DataPacket_PacketType DataPacket_PacketType_PacketType_MIN = DataPacket_PacketType_TEMPERATURE;
constexpr DataPacket_PacketType DataPacket_PacketType_PacketType_MAX = DataPacket_PacketType_TEMPERATURE;
constexpr int DataPacket_PacketType_PacketType_ARRAYSIZE = DataPacket_PacketType_PacketType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataPacket_PacketType_descriptor();
template<typename T>
inline const std::string& DataPacket_PacketType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataPacket_PacketType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataPacket_PacketType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataPacket_PacketType_descriptor(), enum_t_value);
}
inline bool DataPacket_PacketType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataPacket_PacketType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataPacket_PacketType>(
    DataPacket_PacketType_descriptor(), name, value);
}
enum EventPacket_PacketType : int {
  EventPacket_PacketType_TIPPER_CLICK = 0,
  EventPacket_PacketType_SOFT_RESET = 1,
  EventPacket_PacketType_HARD_RESET = 2,
  EventPacket_PacketType_START_PAUSE = 3,
  EventPacket_PacketType_STOP_PAUSE = 4,
  EventPacket_PacketType_EventPacket_PacketType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EventPacket_PacketType_EventPacket_PacketType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EventPacket_PacketType_IsValid(int value);
constexpr EventPacket_PacketType EventPacket_PacketType_PacketType_MIN = EventPacket_PacketType_TIPPER_CLICK;
constexpr EventPacket_PacketType EventPacket_PacketType_PacketType_MAX = EventPacket_PacketType_STOP_PAUSE;
constexpr int EventPacket_PacketType_PacketType_ARRAYSIZE = EventPacket_PacketType_PacketType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventPacket_PacketType_descriptor();
template<typename T>
inline const std::string& EventPacket_PacketType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EventPacket_PacketType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EventPacket_PacketType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EventPacket_PacketType_descriptor(), enum_t_value);
}
inline bool EventPacket_PacketType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EventPacket_PacketType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EventPacket_PacketType>(
    EventPacket_PacketType_descriptor(), name, value);
}
// ===================================================================

class DataPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DataPacket) */ {
 public:
  inline DataPacket() : DataPacket(nullptr) {}
  ~DataPacket() override;
  explicit constexpr DataPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataPacket(const DataPacket& from);
  DataPacket(DataPacket&& from) noexcept
    : DataPacket() {
    *this = ::std::move(from);
  }

  inline DataPacket& operator=(const DataPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataPacket& operator=(DataPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataPacket* internal_default_instance() {
    return reinterpret_cast<const DataPacket*>(
               &_DataPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataPacket& a, DataPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DataPacket* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataPacket* New() const final {
    return new DataPacket();
  }

  DataPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataPacket& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DataPacket";
  }
  protected:
  explicit DataPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DataPacket_PacketType PacketType;
  static constexpr PacketType TEMPERATURE =
    DataPacket_PacketType_TEMPERATURE;
  static inline bool PacketType_IsValid(int value) {
    return DataPacket_PacketType_IsValid(value);
  }
  static constexpr PacketType PacketType_MIN =
    DataPacket_PacketType_PacketType_MIN;
  static constexpr PacketType PacketType_MAX =
    DataPacket_PacketType_PacketType_MAX;
  static constexpr int PacketType_ARRAYSIZE =
    DataPacket_PacketType_PacketType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PacketType_descriptor() {
    return DataPacket_PacketType_descriptor();
  }
  template<typename T>
  static inline const std::string& PacketType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PacketType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PacketType_Name.");
    return DataPacket_PacketType_Name(enum_t_value);
  }
  static inline bool PacketType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PacketType* value) {
    return DataPacket_PacketType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kPacketTypeFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // string description = 1;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .DataPacket.PacketType packetType = 2;
  void clear_packettype();
  ::DataPacket_PacketType packettype() const;
  void set_packettype(::DataPacket_PacketType value);
  private:
  ::DataPacket_PacketType _internal_packettype() const;
  void _internal_set_packettype(::DataPacket_PacketType value);
  public:

  // int32 value = 3;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DataPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  int packettype_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raincounter_2eproto;
};
// -------------------------------------------------------------------

class EventPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EventPacket) */ {
 public:
  inline EventPacket() : EventPacket(nullptr) {}
  ~EventPacket() override;
  explicit constexpr EventPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventPacket(const EventPacket& from);
  EventPacket(EventPacket&& from) noexcept
    : EventPacket() {
    *this = ::std::move(from);
  }

  inline EventPacket& operator=(const EventPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventPacket& operator=(EventPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventPacket* internal_default_instance() {
    return reinterpret_cast<const EventPacket*>(
               &_EventPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EventPacket& a, EventPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(EventPacket* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventPacket* New() const final {
    return new EventPacket();
  }

  EventPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EventPacket& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EventPacket";
  }
  protected:
  explicit EventPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EventPacket_PacketType PacketType;
  static constexpr PacketType TIPPER_CLICK =
    EventPacket_PacketType_TIPPER_CLICK;
  static constexpr PacketType SOFT_RESET =
    EventPacket_PacketType_SOFT_RESET;
  static constexpr PacketType HARD_RESET =
    EventPacket_PacketType_HARD_RESET;
  static constexpr PacketType START_PAUSE =
    EventPacket_PacketType_START_PAUSE;
  static constexpr PacketType STOP_PAUSE =
    EventPacket_PacketType_STOP_PAUSE;
  static inline bool PacketType_IsValid(int value) {
    return EventPacket_PacketType_IsValid(value);
  }
  static constexpr PacketType PacketType_MIN =
    EventPacket_PacketType_PacketType_MIN;
  static constexpr PacketType PacketType_MAX =
    EventPacket_PacketType_PacketType_MAX;
  static constexpr int PacketType_ARRAYSIZE =
    EventPacket_PacketType_PacketType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PacketType_descriptor() {
    return EventPacket_PacketType_descriptor();
  }
  template<typename T>
  static inline const std::string& PacketType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PacketType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PacketType_Name.");
    return EventPacket_PacketType_Name(enum_t_value);
  }
  static inline bool PacketType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PacketType* value) {
    return EventPacket_PacketType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kPacketTypeFieldNumber = 2,
  };
  // string description = 1;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .EventPacket.PacketType packetType = 2;
  void clear_packettype();
  ::EventPacket_PacketType packettype() const;
  void set_packettype(::EventPacket_PacketType value);
  private:
  ::EventPacket_PacketType _internal_packettype() const;
  void _internal_set_packettype(::EventPacket_PacketType value);
  public:

  // @@protoc_insertion_point(class_scope:EventPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  int packettype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raincounter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataPacket

// string description = 1;
inline void DataPacket::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& DataPacket::description() const {
  // @@protoc_insertion_point(field_get:DataPacket.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataPacket::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DataPacket.description)
}
inline std::string* DataPacket::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:DataPacket.description)
  return _s;
}
inline const std::string& DataPacket::_internal_description() const {
  return description_.Get();
}
inline void DataPacket::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DataPacket::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DataPacket::release_description() {
  // @@protoc_insertion_point(field_release:DataPacket.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DataPacket::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:DataPacket.description)
}

// .DataPacket.PacketType packetType = 2;
inline void DataPacket::clear_packettype() {
  packettype_ = 0;
}
inline ::DataPacket_PacketType DataPacket::_internal_packettype() const {
  return static_cast< ::DataPacket_PacketType >(packettype_);
}
inline ::DataPacket_PacketType DataPacket::packettype() const {
  // @@protoc_insertion_point(field_get:DataPacket.packetType)
  return _internal_packettype();
}
inline void DataPacket::_internal_set_packettype(::DataPacket_PacketType value) {
  
  packettype_ = value;
}
inline void DataPacket::set_packettype(::DataPacket_PacketType value) {
  _internal_set_packettype(value);
  // @@protoc_insertion_point(field_set:DataPacket.packetType)
}

// int32 value = 3;
inline void DataPacket::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataPacket::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataPacket::value() const {
  // @@protoc_insertion_point(field_get:DataPacket.value)
  return _internal_value();
}
inline void DataPacket::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void DataPacket::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:DataPacket.value)
}

// -------------------------------------------------------------------

// EventPacket

// string description = 1;
inline void EventPacket::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& EventPacket::description() const {
  // @@protoc_insertion_point(field_get:EventPacket.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EventPacket::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EventPacket.description)
}
inline std::string* EventPacket::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:EventPacket.description)
  return _s;
}
inline const std::string& EventPacket::_internal_description() const {
  return description_.Get();
}
inline void EventPacket::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EventPacket::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EventPacket::release_description() {
  // @@protoc_insertion_point(field_release:EventPacket.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EventPacket::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:EventPacket.description)
}

// .EventPacket.PacketType packetType = 2;
inline void EventPacket::clear_packettype() {
  packettype_ = 0;
}
inline ::EventPacket_PacketType EventPacket::_internal_packettype() const {
  return static_cast< ::EventPacket_PacketType >(packettype_);
}
inline ::EventPacket_PacketType EventPacket::packettype() const {
  // @@protoc_insertion_point(field_get:EventPacket.packetType)
  return _internal_packettype();
}
inline void EventPacket::_internal_set_packettype(::EventPacket_PacketType value) {
  
  packettype_ = value;
}
inline void EventPacket::set_packettype(::EventPacket_PacketType value) {
  _internal_set_packettype(value);
  // @@protoc_insertion_point(field_set:EventPacket.packetType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DataPacket_PacketType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DataPacket_PacketType>() {
  return ::DataPacket_PacketType_descriptor();
}
template <> struct is_proto_enum< ::EventPacket_PacketType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EventPacket_PacketType>() {
  return ::EventPacket_PacketType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raincounter_2eproto
